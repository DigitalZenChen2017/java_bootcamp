package hello;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(path = "/demo")
public class MainController {
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired // like static method, no new() required, creating a bean (big POJO)
	private UserRepository userRepository;

//	@GetMapping(path = "/add")
//	public @ResponseBody User addNewUser(@RequestParam String name, @RequestParam String email) {
//		// @ResponseBody means the returned String is the response, not a view name
//		// @RequestParam means it is a parameter from the GET (read) or @RequestBody POST (update and delete)
//		// request
//		User u = new User();
//		u.setName(name);
//		u.setEmail(email);
//		userRepository.save(u);
//		return u;
////		return "User Saved: " + name + ", " + email;
//	}
	
	@PostMapping(path = "/add")
	public @ResponseBody User addNewUser(@RequestBody User u) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET (read) or @RequestBody POST (update and delete)
		// request
		userRepository.save(u);
		return u;
	}

	@GetMapping("/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}

	@GetMapping("/get") // @RequestParam - have to add "?id=?"
	public @ResponseBody Optional<User> getUser(@RequestParam int id) { // returns the user
		Optional<User> u = userRepository.findById(id);
		return u;
	}

	@PostMapping("/remove") // @RequestParam - have to add "?id=?"
	public @ResponseBody User removeUser(@RequestBody User u) { // remove the user by id
		userRepository.delete(u);
//		if (userRepository.existsById(u)) {
//			return "User ID" + id + "was successfully deleted.";
//		} else {
//			return "User ID" + id + "was not successful deleted.";
//		}
		return u;
	}

	@PostMapping("/update")
	public @ResponseBody User updateUser(@RequestBody User u) {
		u = userRepository.save(u);
		return u;
	}
	
	@GetMapping("/getByEmail") // @RequestParam - have to add "?id=?"
	public @ResponseBody User getUserByEmail(@RequestParam String email) { // returns the user
		User u = userRepository.findByEmail(email);
		return u;
	}
}
