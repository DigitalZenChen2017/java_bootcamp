package hello.web;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.business.User;
import hello.business.UserRepository;

@Controller
@RequestMapping(path = "/users")
public class UserController {
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired // like static method, no new() required, creating a bean (big POJO)
	private UserRepository userRepository;

//	@GetMapping(path = "/add")
//	public @ResponseBody User addNewUser(@RequestParam String name, @RequestParam String email) {
//		// @ResponseBody means the returned String is the response, not a view name
//		// @RequestParam means it is a parameter from the GET (read) or @RequestBody POST (update and delete)
//		// request
//		User u = new User();
//		u.setName(name);
//		u.setEmail(email);
//		userRepository.save(u);
//		return u;
////		return "User Saved: " + name + ", " + email;
//	}

	// get all users
	@GetMapping("/")
	public @ResponseBody Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}

	// get method using @RequestParam
//	@GetMapping("/get") // @RequestParam - have to add "?id=?"
//	public @ResponseBody Optional<User> getUserById(@RequestParam int id) { // returns the user
////		Optional<User> u = userRepository.findById(id);
//		return getUser(id); // calls path variable get method
//	}

	// get method using path variable
	@GetMapping("/{id}")
	public @ResponseBody Optional<User> getUser(@PathVariable int id) { // returns the user
		Optional<User> u = userRepository.findById(id);
		return u;
	}

	// add a user
	@PostMapping(path = "/")
	public @ResponseBody User addNewUser(@RequestBody User u) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET (read) or @RequestBody
		// POST (update and delete)
		// request
//		userRepository.save(u);
//		return u;
		return saveUser(u);
	}

	// update a user - changed from Post to PutMapping
	@PutMapping("/{id}")
	public @ResponseBody User updateUser(@PathVariable int id, @RequestBody User u) {
//		u = userRepository.save(u);
		return saveUser(u);
//		return u;
	}

	private @ResponseBody User saveUser(User u) {
		return userRepository.save(u);
	}

	// delete a user
	@DeleteMapping("/{id}")
	public @ResponseBody String removeUser(@PathVariable int id) { // remove the user by id
		if (userRepository.existsById(id)) {
			userRepository.deleteById(id);
			return "User ID" + id + " was successfully deleted.";
		} else {
			return "User ID" + id + " was not successful deleted.";
		}
	}

	// get user by email
	@GetMapping("/getByEmail")
	public @ResponseBody User getUserByEmail(@RequestBody User user) { // returns the user
		User u = userRepository.findByEmail(user.getEmail());
		return u;
	}
}
