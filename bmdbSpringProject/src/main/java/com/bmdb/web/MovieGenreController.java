package com.bmdb.web;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.bmdb.business.MovieGenre;
import com.bmdb.business.MovieGenreRepository;
import com.bmdb.util.JsonResponse;

@Controller
@RequestMapping(path = "/movieGenre")
public class MovieGenreController {
	// This means to get the bean called MovieGenreRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired // like static method, no new() required, creating a bean (big POJO)
	private MovieGenreRepository MovieGenreRepository;

	// get all MovieGenres
	@GetMapping("/")
	public @ResponseBody JsonResponse getAllMovieGenres() {
		JsonResponse jr = null; // instantiates JsonResponse object called "jr"
		try {
			jr = JsonResponse.getInstance(MovieGenreRepository.findAll()); // returns all instance of MovieGenre type
		} catch (Exception ex) {
			jr = JsonResponse.getInstance(ex);
		}
		return jr;
	}

	// get MovieGenres - pagination version
	@GetMapping("")
	public @ResponseBody JsonResponse getMovieGenres(@RequestParam int start, @RequestParam int limit) {
		JsonResponse jr = null; // instantiates JsonResponse object called "jr"
		try {
			jr = JsonResponse.getInstance(MovieGenreRepository.findAll(PageRequest.of(start, limit))); // returns all
																									// instance
																									// of MovieGenre type
		} catch (Exception ex) {
			jr = JsonResponse.getInstance(ex);
		}
		return jr;
	}

	// get method using @RequestParam
//	@GetMapping("/get") // @RequestParam - have to add "?id=?"
//	public @ResponseBody Optional<MovieGenre> getMovieGenreById(@RequestParam int id) { // returns the MovieGenre
////		Optional<MovieGenre> u = MovieGenreRepository.findById(id);
//		return getMovieGenre(id); // calls path variable get method
//	}

	// get method using path variable
	@GetMapping("/{id}")
	public @ResponseBody JsonResponse getMovieGenre(@PathVariable int id) { // returns the MovieGenre
		JsonResponse jr = null; // instantiates JsonResponse as an object
		try {
			Optional<MovieGenre> mg = MovieGenreRepository.findById(id);
			if (mg.isPresent()) {
				// good call to database - return a valid MovieGenre
				jr = JsonResponse.getInstance(mg); // return MovieGenre object
			} else {
				jr = JsonResponse.getInstance(new Exception("No MovieGenre Found for ID: " + id));
			}
		} catch (Exception ex) {
			jr = JsonResponse.getInstance(ex);
		}
		return jr;
	}

	// add an MovieGenre
	@PostMapping(path = "/")
	public @ResponseBody JsonResponse addNewMovieGenre(@RequestBody MovieGenre mg) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET (read) or @RequestBody
		// POST (update and delete)
		// request
//		return u;
//		JsonResponse jr = null;
//		jr = JsonResponse.getInstance(saveMovieGenre(u));
		return saveMovieGenre(mg);
	}

	// update an MovieGenre - changed from Post to PutMapping
	@PutMapping("/{id}")
	public @ResponseBody JsonResponse updateMovieGenre(@PathVariable int id, @RequestBody MovieGenre mg) {
//		u = MovieGenreRepository.save(u);
		return saveMovieGenre(mg);
//		return u;
	}

	private @ResponseBody JsonResponse saveMovieGenre(MovieGenre mg) {
		JsonResponse jr = null;
		try {
			MovieGenreRepository.save(mg);
			jr = JsonResponse.getInstance(mg);
		} catch (DataIntegrityViolationException dive) {
			// TODO better way to handle exceptions
			jr = JsonResponse.getInstance(dive);
			jr.setErrors(dive.getMessage());
		}
		return jr;
	}

	// delete an MovieGenre
	@DeleteMapping("/{id}")
	public @ResponseBody JsonResponse removeUser(@PathVariable int id) { // remove the MovieGenre by id
		JsonResponse jr = null;
		Optional<MovieGenre> mg = MovieGenreRepository.findById(id);
		if (mg.isPresent()) {
			MovieGenreRepository.deleteById(id);
			jr = JsonResponse.getInstance(mg);
		} else {
			jr = JsonResponse.getInstance("User ID " + id + " was not successful deleted.");
		}
		return jr;
	}
	
//	// get MovieGenre by Gender
//	@GetMapping("/getByGender")
//	public @ResponseBody JsonResponse getMovieGenreByGender(@RequestBody MovieGenre MovieGenre) { // returns the user
//		return JsonResponse.getInstance(MovieGenreRepository.findByGender(MovieGenre.getGender()));
//	}
}
